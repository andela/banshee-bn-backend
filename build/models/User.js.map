{"version":3,"sources":["../../src/models/User.js"],"names":["mongoose","require","uniqueValidator","crypto","secret","UserSchema","Schema","username","type","String","lowercase","unique","required","match","index","email","bio","image","favorites","Types","ObjectId","ref","following","hash","salt","timestamps","plugin","message","methods","validPassword","password","pbkdf2Sync","toString","setPassword","randomBytes","toAuthJSON","model"],"mappings":";;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,kBAAkBD,QAAQ,2BAAR,CAAxB;AACA,IAAME,SAASF,QAAQ,QAAR,CAAf;AACA,IAAMG,SAASH,QAAQ,WAAR,EAAqBG,MAApC;;AAEA,IAAMC,aAAa,IAAIL,SAASM,MAAb,CACf;AACIC,cAAU;AACNC,cAAMC,MADA;AAENC,mBAAW,IAFL;AAGNC,gBAAQ,IAHF;AAINC,kBAAU,CAAC,IAAD,EAAO,gBAAP,CAJJ;AAKNC,eAAO,CAAC,gBAAD,EAAmB,YAAnB,CALD;AAMNC,eAAO;AAND,KADd;AASIC,WAAO;AACHP,cAAMC,MADH;AAEHC,mBAAW,IAFR;AAGHC,gBAAQ,IAHL;AAIHC,kBAAU,CAAC,IAAD,EAAO,gBAAP,CAJP;AAKHC,eAAO,CAAC,cAAD,EAAiB,YAAjB,CALJ;AAMHC,eAAO;AANJ,KATX;AAiBIE,SAAKP,MAjBT;AAkBIQ,WAAOR,MAlBX;AAmBIS,eAAW,CAAC,EAAEV,MAAMR,SAASM,MAAT,CAAgBa,KAAhB,CAAsBC,QAA9B,EAAwCC,KAAK,SAA7C,EAAD,CAnBf;AAoBIC,eAAW,CAAC,EAAEd,MAAMR,SAASM,MAAT,CAAgBa,KAAhB,CAAsBC,QAA9B,EAAwCC,KAAK,MAA7C,EAAD,CApBf;AAqBIE,UAAMd,MArBV;AAsBIe,UAAMf;AAtBV,CADe,EAyBf,EAAEgB,YAAY,IAAd,EAzBe,CAAnB;;AA4BApB,WAAWqB,MAAX,CAAkBxB,eAAlB,EAAmC,EAAEyB,SAAS,mBAAX,EAAnC;;AAEAtB,WAAWuB,OAAX,CAAmBC,aAAnB,GAAmC,UAASC,QAAT,EAAmB;AAClD,QAAMP,OAAOpB,OACR4B,UADQ,CACGD,QADH,EACa,KAAKN,IADlB,EACwB,KADxB,EAC+B,GAD/B,EACoC,QADpC,EAERQ,QAFQ,CAEC,KAFD,CAAb;AAGA,WAAO,KAAKT,IAAL,KAAcA,IAArB;AACH,CALD;;AAOAlB,WAAWuB,OAAX,CAAmBK,WAAnB,GAAiC,UAASH,QAAT,EAAmB;AAChD,SAAKN,IAAL,GAAYrB,OAAO+B,WAAP,CAAmB,EAAnB,EAAuBF,QAAvB,CAAgC,KAAhC,CAAZ;AACA,SAAKT,IAAL,GAAYpB,OACP4B,UADO,CACID,QADJ,EACc,KAAKN,IADnB,EACyB,KADzB,EACgC,GADhC,EACqC,QADrC,EAEPQ,QAFO,CAEE,KAFF,CAAZ;AAGH,CALD;;AAOA3B,WAAWuB,OAAX,CAAmBO,UAAnB,GAAgC,YAAW;AACvC,WAAO;AACH5B,kBAAU,KAAKA,QADZ;AAEHQ,eAAO,KAAKA;AAFT,KAAP;AAIH,CALD;;AAOAf,SAASoC,KAAT,CAAe,MAAf,EAAuB/B,UAAvB","file":"User.js","sourcesContent":["const mongoose = require(\"mongoose\");\nconst uniqueValidator = require(\"mongoose-unique-validator\");\nconst crypto = require(\"crypto\");\nconst secret = require(\"../config\").secret;\n\nconst UserSchema = new mongoose.Schema(\n    {\n        username: {\n            type: String,\n            lowercase: true,\n            unique: true,\n            required: [true, \"can't be blank\"],\n            match: [/^[a-zA-Z0-9]+$/, \"is invalid\"],\n            index: true\n        },\n        email: {\n            type: String,\n            lowercase: true,\n            unique: true,\n            required: [true, \"can't be blank\"],\n            match: [/\\S+@\\S+\\.\\S+/, \"is invalid\"],\n            index: true\n        },\n        bio: String,\n        image: String,\n        favorites: [{ type: mongoose.Schema.Types.ObjectId, ref: \"Article\" }],\n        following: [{ type: mongoose.Schema.Types.ObjectId, ref: \"User\" }],\n        hash: String,\n        salt: String\n    },\n    { timestamps: true }\n);\n\nUserSchema.plugin(uniqueValidator, { message: \"is already taken.\" });\n\nUserSchema.methods.validPassword = function(password) {\n    const hash = crypto\n        .pbkdf2Sync(password, this.salt, 10000, 512, \"sha512\")\n        .toString(\"hex\");\n    return this.hash === hash;\n};\n\nUserSchema.methods.setPassword = function(password) {\n    this.salt = crypto.randomBytes(16).toString(\"hex\");\n    this.hash = crypto\n        .pbkdf2Sync(password, this.salt, 10000, 512, \"sha512\")\n        .toString(\"hex\");\n};\n\nUserSchema.methods.toAuthJSON = function() {\n    return {\n        username: this.username,\n        email: this.email\n    };\n};\n\nmongoose.model(\"User\", UserSchema);\n"]}